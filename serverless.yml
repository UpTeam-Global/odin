service:
  name: odin

plugins:
  - serverless-webpack
  - serverless-cloudformation-resource-counter
  - serverless-prune-plugin
  - serverless-lumigo

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${self:custom.stage}
  environment:
    REVISION: ${file(infrastructure/helper.js):revision}
    STAGE: ${self:custom.stage}
    NODE_ENV: PRODUCTION
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    LAMBDA_WRAPPER_LOG: true
    DELETE_STACK_TOPIC: !Join
      - ':'
      - - arn:aws:sns
        - !Ref AWS::Region
        - !Ref AWS::AccountId
        - delete-stack-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Resource: '*'
      Action: '*'

custom:
  odin: ${file(./odin.yml)}
  stage: ${opt:stage, env:STAGE, 'local'}
  # https://github.com/lumigo-io/serverless-lumigo-plugin
  lumigo:
    token: ${env:LUMIGO_TOKEN}
    nodePackageManager: npm
  # https://github.com/claygregory/serverless-prune-plugin
  prune:
    automatic: true
    number: 3
  # https://github.com/drexler/serverless-cloudformation-resource-counter
  warningThreshold: 100
  # https://github.com/serverless-heaven/serverless-webpack
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules:
      forceExclude:
        - aws-sdk

package:
  exclude:
    - .git
    - .env
    - package-lock.json
    - package.json
    - README.md
  excludeDevDependencies: true

functions:
  check-stacks:
    handler: app/check.handler
    events:
      - schedule:
          rate: ${self:custom.odin.dailyRate}
          input:
            staleAfter: ${self:custom.odin.dailyStaleAfter}
            stagesToRetain: ${self:custom.odin.stagesToRetain}
            deleteableStatuses: ${self:custom.odin.deleteableStatuses}
            namesToRetain: ${self:custom.odin.namesToRetain}
      - schedule:
          rate: ${self:custom.odin.hourlyRate}
          input:
            staleAfter: ${self:custom.odin.hourlyStaleAfter}
            stagesToRetain: ${self:custom.odin.stagesToRetain}
            deleteableStatuses: ${self:custom.odin.deleteableStatuses}
            namesToRetain: ${self:custom.odin.namesToRetain}

  delete-stacks:
    handler: app/delete.handler
    events:
      - sns: delete-stack-${opt:stage, self:provider.stage}
    environment:
      EMPTY_ALL_BUCKETS: ${self:custom.odin.emptyAllBuckets}
      BUCKETS_TO_EMPTY: ${self:custom.odin.bucketsToEmpty}

resources:
  Description: Automated service for destroying temporary stacks (retains production, qa, development, and automation stacks)

  Outputs:
    DailySchedule:
      Description: Schedule for daily jobs and maximum stack age in hours before deletion
      Value: ${self:custom.odin.dailyRate}, max ${self:custom.odin.dailyStaleAfter} hours
    HourlySchedule:
      Description: Schedule for hourly jobs and maximum stack age in hours before deletion
      Value: ${self:custom.odin.hourlyRate}, max ${self:custom.odin.hourlyStaleAfter} hours
    StackNamesToRetain:
      Description: Names of stacks that will be retained
      Value: In ${self:custom.odin.namesToRetain}
    StagesToRetain:
      Description: Stages of stacks that will be retained
      Value: In ${self:custom.odin.stagesToRetain}
    StatusesToRetain:
      Description: Statuses of stacks that will be retained
      Value: Not in ${self:custom.odin.deleteableStatuses}

    DeleteStackSNS:
      Description: ARN of the ${opt:stage, self:provider.stage} stage SNS topic for stack deletion
      Value:
        Fn::Join:
          - ':'
          - - arn:aws:sns:us-east-1
            - Ref: AWS::AccountId
            - delete-stack-${opt:stage, self:provider.stage}
      Export:
        Name: odin-${opt:stage, self:provider.stage}-delete-stack-sns
